<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_platform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ferris platform logic main

//If the player is on this moving platform
if ((collision_rectangle(bbox_left,bbox_top-12,bbox_right,bbox_top+12,global.main_player,0,0))
&amp;&amp; (global.main_player.y &lt; y-11) &amp;&amp; (floor(global.main_player.y_speed) &gt;= 0))
{

    //Check for a moving platform
    //var check = collision_rectangle(global.main_player.bbox_left,global.main_player.bbox_bottom-1,global.main_player.bbox_right,global.main_player.bbox_bottom+1,par_platform,0,1);
    //if (check)
      //  exit;

    //Snap the player vertically
    global.main_player.y = ceil(bbox_top-14);
    if global.main_player.y_speed &gt;= 0
    {
    global.main_player.y_speed = 0;
    global.main_player.ground = 1;
    }
    

    //Snap the player horizontally and prevent it from getting embed on a solid.
    global.main_player.x += x-xprevious;
    if (collision_rectangle(global.main_player.bbox_right,global.main_player.bbox_top+4,global.main_player.bbox_right+1,global.main_player.bbox_bottom-1,par_solid,0,0))
        with (global.main_player) x--;
    else if (collision_rectangle(global.main_player.bbox_left-1,global.main_player.bbox_top+4,global.main_player.bbox_left,global.main_player.bbox_bottom-1,par_solid,0,0))
        with (global.main_player) x++;   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ferris platform logic AI

//If the player is on this moving platform
if ((collision_rectangle(bbox_left,bbox_top-12,bbox_right,bbox_top+12,obj_ai_player,0,0))
&amp;&amp; (obj_ai_player.y &lt; y-11) &amp;&amp; (floor(obj_ai_player.y_speed) &gt;= 0))
{

    //Check for a moving platform
    //var check = collision_rectangle(obj_ai_player.bbox_left,obj_ai_player.bbox_bottom-1,obj_ai_player.bbox_right,obj_ai_player.bbox_bottom+1,par_platform,0,1);
    //if (check)
      //  exit;

    //Snap the player vertically
    obj_ai_player.y = ceil(bbox_top-14);
    if obj_ai_player.y_speed &gt;= 0
    {
    obj_ai_player.y_speed = 0;
    obj_ai_player.ground = 1;
    }
    

    //Snap the player horizontally and prevent it from getting embed on a solid.
    obj_ai_player.x += x-xprevious;
    if (collision_rectangle(obj_ai_player.bbox_right,obj_ai_player.bbox_top+4,obj_ai_player.bbox_right+1,obj_ai_player.bbox_bottom-1,par_solid,0,0))
        with (obj_ai_player) x--;
    else if (collision_rectangle(obj_ai_player.bbox_left-1,obj_ai_player.bbox_top+4,obj_ai_player.bbox_left,obj_ai_player.bbox_bottom-1,par_solid,0,0))
        with (obj_ai_player) x++;   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
