<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dog_charging</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_boss</parentName>
  <maskName>spr_dog_charging</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
physics_init()
enemy_max_hp = 32;
enemy_hp = enemy_max_hp;
image_speed =0.2 ;
image_index = 0;

// Flags.
animation_direction = -1;
badnik_block_timer = -1;
state = 0;
charge_timer = -1;
dashing_timer = -1;
skid_dust_timer = -1;

instance_create(x,y,obj_boss_1_shield);
shield_active = false;
alarm[0] = 220;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with obj_rainmaker
{
instance_destroy()
}

with obj_filter_black
{
instance_destroy()
}

voice_play(snd_voice_matter_poodle2);
scr_display_message_ext(2, text(
"NOOO, NOT MY POODLE!! HOW DARE YOU!",
"NÃOOO O MEU POODLE NÃO!!#COMO OUSA!!#"), 160, c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if distance_to_object(obj_throwblock) &gt; 512
{
c = instance_create(view_xview[0] + 256, view_yview[0], obj_throwblock)
scr_create_smoke(c.x, c.y, sprSmoke16)
aud_play_simple(snd_spring)
}
alarm[0] = 220;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pitch
if pitch_mode = false &amp;&amp; enemy_hp &lt; 10
{
aud_play_simple(snd_grand_explosion)
instance_create(x,y,obj_fade_in_white_fast)
instance_create(x,y,obj_rainmaker)
instance_create(x,y,obj_filter_black);
pitch_mode = true;
scr_shake_cam(30)
scr_chico_narrate(NARRATE_HEATEN)
}

if pitch_mode
{
dummy_effect_create(spr_enemy_explosion, 0.5, view_xview[0] + random(512), view_yview[0] + random(288), -10, 0)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mask
if shield_active
{
enemy_state = "invulnerable"
}else
{
if enemy_state = "invulnerable"
{
enemy_state = "active"
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
physics_step()  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State 0 - Walk around
if (state == 0)
{
    if (ground)
    {
        // No friction in the ground..
            apply_friction = false;
       
        // Movement depending on animation_direction
        if (animation_direction = 1)
        {
            physics_move_right()
        }
        
        if (animation_direction = -1)
        {
            physics_move_left()
        }
        
        // Collision with Walls.
            if (wall_r)
            {
                animation_direction = -1;
            }
            
            if (wall_l)
            {
                animation_direction = 1;
            }
            
        // Collision with Badnik Blocks.
            if (instance_place(x, y, obj_badnik_block) &amp;&amp; badnik_block_timer = -1)
            {
                badnik_block_timer = 80;
                animation_direction *= -1;
            }
            
            if (badnik_block_timer &gt; -1)
            {
                badnik_block_timer --;
            }
            
        // Charge
            if instance_exists(obj_player)
            {
                if ((distance_to_object(obj_player) &lt; 150 &amp;&amp; dashing_timer = -1) &amp;&amp;
                ((obj_player.x &gt; x &amp;&amp; animation_direction = 1) or (obj_player.x &lt; x &amp;&amp; animation_direction = -1))
                 &amp;&amp; (sprite_index = spr_dog_walk &amp;&amp; abs(x_speed) = x_max &amp;&amp; animation_direction = sign(x_speed)))
                {
                    state = 1;
                    charge_timer = 120;
                    aud_play_simple(snd_charge)
                }
            }
            

    }
    else
    {
        // Friction in the air.
            apply_friction = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State 1 - Charging
if (state == 1)
{
    // Friction
        apply_friction = true;
    
    // Point Towards Player.
        if (obj_player.ground)
        {
            if (obj_player.x &gt; x)
            {
                animation_direction = 1;
            }
            else
            {
                animation_direction = -1;
            }
        }
        
    // Charge
        if charge_timer &gt; -1
        {
            charge_timer --;
        }
        else
        {
            dashing_timer = 285;
            state = 2;
            shield_active = true;
            aud_play_simple(snd_release);
            scr_shake_cam(8);
        }
    
    // Badnik Blocks
        if instance_place(x,y,obj_badnik_block)
        {
            badnik_block_timer = 20;
            x_speed /= 1.2;
        }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State 2 - Dash
if (state == 2)
{
    if (ground)
    {
        // No friction in the ground..
            apply_friction = false;
       
        // Movement depending on animation_direction
            if (animation_direction = 1)
            {
                physics_move_right()
            }
            
            if (animation_direction = -1)
            {
                physics_move_left()
            }
        
        // Collision with Walls.
            if (wall_r)
            {
                animation_direction = -1;
            }
            
            if (wall_l)
            {
                animation_direction = 1;
            }
            
        // Collision with Badnik Blocks.
            if (instance_place(x, y, obj_badnik_block) &amp;&amp; badnik_block_timer = -1)
            {
                badnik_block_timer = 80;
                animation_direction *= -1;
            }
            
            if (badnik_block_timer &gt; -1)
            {
                badnik_block_timer --;
            }
            
        // Dash Timer
            if (dashing_timer &gt; -1)
            {
                dashing_timer --;
            }
            else
            {
                state = 0;
                x_speed /= 2; 
            }
    }
    else
    {
        // Friction in the air.
            apply_friction = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprites.
    if (state = 0)
    {
            sprite_index = spr_dog_walk;
    }
    
    if (state = 1)
    {
        sprite_index = spr_dog_charging;
    }
    
    if (state = 2)
    {
            sprite_index = spr_dog_charged_walk;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Physics
var mt_factor;
mt_factor = 1;

if pitch_mode = true
{
mt_factor = 1.5;
}

if (state != 2)
{
    x_accel   = 0.3*mt_factor;
    x_decel   = 0.025 * 2*mt_factor;
    x_friction = 0.05 * 2*mt_factor;
    x_max     = 5*mt_factor;
}
else
{
    x_accel   = 0.5*mt_factor;
    x_decel   = 0.25*mt_factor;
    x_friction = 0.05*mt_factor;
    x_max     = 8.5*mt_factor;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Effects

// Spindash
if state = 1
{
        if chance(5) = 1
        {
            dummy_effect_create_speed(sprSmoke8, 0.2, floor(x) - (20 * animation_direction), bbox_bottom, 0.2, 0, 5 * -animation_direction, -random(5), 0.2)    
        }
        
        scr_sparkle()
}

// Skid Dust
if (state = 2)
{
    if skid_dust_timer = -1
    {
        dummy_effect_create(choose(sprSmoke8, sprSmoke16), 0.5, floor(x) - (20 * animation_direction), bbox_bottom - 2, 2, 0 )
        scr_afterimage(sprite_index, image_index, floor(x), floor(y), animation_direction, 1, 0.8, 0, c_aqua)
        skid_dust_timer = 6;
    }
    else
    {
        skid_dust_timer --;
    }
    
    scr_sparkle()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>physics_draw()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
