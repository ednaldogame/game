<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

 // Horizontal:
    x_speed   = 0;
    x_max     = 3;
    x_accel   = 0.146875;
    x_decel   = 0.5;
    
 // Vertical:
    y_speed        = 0;
    y_max          = 12;
    y_gravity      = 0.21875;
    y_jumpstrength = -5.5;

 // Collision:
    ground   = false;
    wall_r = noone;
    wall_l = noone; 
    
 // GM &amp; Misc:
    apply_physics = true;
    deactivate_outsideview = false;
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement.

//Outside Screen Handling
if !inside_view() &amp;&amp; deactivate_outsideview{
exit;
}

 // X Movement.    
    repeat(abs(x_speed)){
          if(place_meeting(x + sign(x_speed), y, par_solid) &amp;&amp; !place_meeting(x + sign(x_speed), y - 1, par_solid)){
             y -= 1;
          }
          if(place_meeting(x + sign(x_speed), y + 2, par_solid) &amp;&amp; !place_meeting(x + sign(x_speed), y + 1, par_solid)){
             y += 1;    
          }    
          if(!place_meeting(x + sign(x_speed), y, par_solid)){
             x += sign(x_speed);
          }else{
           x_speed = 0; 
          }         
    }

    
 // Y Movement.
    repeat(abs(y_speed)){
           if(!scr_collision_check()){
              y += sign(y_speed);
           }else{
                 y_speed   = 0; 
           }       
    }
    if(ground == false &amp;&amp; apply_physics){
       y_speed = scr_approach(y_speed, y_max, y_gravity);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find collision.
//Ground Collision
    var g;
    g = scr_collision_check()
    
//Uses both the default Neptune collision method and the collision rectangle scripts (used frequently in Mario Worlds Delta) to check for collision.
    if g &amp;&amp; collision_rectangle(bbox_left, bbox_bottom+1, bbox_right, bbox_bottom+1, par_terrain, 0, 0){
    ground = true;
    }else{
    ground = false;
    }
    
//Wall Collision
     if((place_meeting(x + sign(x_speed), y, par_solid) &amp;&amp; !place_meeting(x + sign(x_speed), y - 1, par_solid)) || (place_meeting(x + sign(x_speed), y + 2, par_solid) &amp;&amp; !place_meeting(x + sign(x_speed), y + 1, par_solid)) ){
       wall_l = 0
       wall_r = 0       
    }else{
       wall_l = (place_meeting(x - 1, y, par_solid)); 
       wall_r = (place_meeting(x + 1, y, par_solid));    
    }  
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
