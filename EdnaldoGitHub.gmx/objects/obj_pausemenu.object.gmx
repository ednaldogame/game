<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The pause menu

//Play a sound and stop some sounds
//audio_play_sound(snd_pause,false,0);
//audio_stop_sound(snd_pmeter);
//audio_stop_sound(snd_skid);

//Make sure the box doesn't animate
image_speed = 0;
image_index = 0;
image_alpha = 0;
image_xscale = 0;
image_yscale = 0;

//Shader variables
uni_time = 0;//shader_get_uniform(shd_grayscale,"time");
var_time_var = 0;

uni_resolution = 0;//shader_get_uniform(shd_grayscale,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_greyscale_fade = 0;//shader_get_uniform(shd_grayscale,"fade");
var_greyscale_fade = 0;

//Create a screenshot
back = background_create_from_surface(application_surface, 0, 0, 512, 288, 0, 0);

//Stop movement on all backgrounds
for (var i=0; i&lt;8; i++) {

    temp_h[i] = background_hspeed[i];
    temp_v[i] = background_vspeed[i];
    background_hspeed[i] = 0;
    background_vspeed[i] = 0;
}

//Pause particles
with (obj_rainmaker) event_user(0);

//Deactivate all timelines
timeline_running = 0;

//Deactivate the instances.
alarm[1] = 2;

//Font
font = fnt_speech10;//global.font_message;

//Set the choice as the first.
choice = 0;

//Handle certain actions.
ready = 0;
ready2 = 1;

//Begin scaling
alarm[0] = 2;

//Handle the Menus
menu[0] = text("Continue", "Continuar");
menu[1] = text("Restart", "Reiniciar");
menu[2] = text("Exit", "Sair");

if room = rm_resistance
{
    menu[2] = text("Return to Menu", "Retornar ao Menu");
}
else
{
    menu[2] = text("Return to Ship", "Retornar Ã  Nave");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate stuff.

//Deactivate everything except this object
instance_deactivate_all(1);

//Activate persistent object
instance_activate_object(obj_global_controller);
instance_activate_object(obj_gamepad_controller);
instance_activate_object(obj_SharedTweener);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle the scaling.

if (ready2 == 1) {

    if (image_xscale &lt; 1) {
    
        //Scale menu up
        image_xscale += 0.1;
        image_yscale += 0.1;
        
        //Backgrond alpha
        image_alpha += 0.05;
        
        //Radius
        var_greyscale_fade += 0.1;
        
        //Repeats the process
        alarm[0] = 1;
    }
    
    else {
    
        image_xscale = 1;
        image_yscale = 1;
        ready = 1;
    }
}

else if (ready2 == 2) {

    if (image_xscale &gt; 0) {
    
        //Scale menu down
        image_xscale -= 0.1;
        image_yscale -= 0.1;
        
        //Backgrond alpha
        image_alpha -= 0.05;
        
        //Radies
        var_greyscale_fade -= 0.1;
        
        //Repeats the process
        alarm[0] = 1;
    }
    
    else {
    
        //Play a sound
        //audio_play_sound(snd_pause,false,0)
        
        //Delete the screenshot
        background_delete(back);
            
        //Activate everything
        instance_activate_all();
        
        //Resume movement on all backgrounds
        for (var i=0; i&lt;8; i++) {
        
            background_hspeed[i] = temp_h[i];
            background_vspeed[i] = temp_v[i];
        }
        
        //Resume particles
        with (obj_rainmaker) event_user(0);
        
        //Activate all timelines
        timeline_running = 1;
        
        //Reset the state of the shift key
        keyboard_clear(global.key_enter);
        keyboard_clear(global.key_action);
        
        //Destroy the message box
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles keyboard presses.

// Activate instances.
instance_activate_object(GMS);
instance_activate_object(obj_other_player);

//Check if the 'Up Key' is pressed.
if (keyboard_check_pressed(global.key_up)) {

    //If the choice is already the first, exit
    if (choice == 0)
    exit;
    
    //Otherwise, move up a choice
    choice -= 1;
    
    //Play a sound
    aud_play_simple(snd_menu_bleep);
}

//Check if the 'Down Key' is pressed.
else if (keyboard_check_pressed(global.key_down)) {

    //If the choice is already the last, exit
    if (choice == 2)
    exit;
    
    //Otherwise, move down a choice
    choice += 1;
    
    //Play a sound
    aud_play_simple(snd_menu_bleep);
}

//Check if the 'Shift Key' is pressed.
else if (keyboard_check_pressed(global.key_action) ||  (keyboard_check_pressed(global.key_enter)) ) {

    //Has the action been completed?
    if (ready == 1) {
    
        //Switch between the choices
        switch (choice) {
            
            //If you chose the first choice.
            case (0): {
            
                if (ready == 1) {
                
                    ready2 = 2;
                    alarm[0] = 1;
                }
            } break;
            
            //If you chose the second choice.
            case (1): {

                    //Activate all deactivated instances
                    instance_activate_all();
                    
                    //Stop Music
                    audio_stop_all();
                    
                    //Play a sound
                    aud_play_simple(snd_menu_accept);
                    
                    //Return to the map
                    instance_create(0,0,objFadeRestart)
                    global.exit_id = EXIT_NULL;
                    
                    //Exit
                    exit;
            } break;
            
            //If you chose the last choice.
            case (2): {
            
                aud_play_simple(snd_menu_accept);
                with instance_create(x,y,obj_fade_to)
                {
                    if room = rm_resistance
                    {
                        value = rm_title_screen;
                    }
                    else
                    {
                        value = rm_resistance;
                    }
                }
                exit;
                
            } break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the menu.
//Set the colour
draw_set_colour(c_black);

draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + 512, view_yview[0] + 288, 0)

//Set the colour
draw_set_colour(c_white);

//Draw the background
if (background_exists(back)) {

    draw_enable_alphablend(0);   
    //Draw the screenshot
    draw_background(back, view_xview, view_yview);  
    draw_enable_alphablend(1);
}   

// Darken.
draw_set_color(c_black);
draw_set_alpha(0.8);
draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + 512, view_yview[0] + 288, 0)
draw_set_alpha(1);
draw_set_color(c_white);

//Draw the actual border.
draw_sprite_ext(spr_pausemenu, 1, view_xview[0]+512/2, view_yview[0]+288/2, image_xscale, image_yscale, 0, c_white, 1);

//Draw if the menu if fully scaled
if (image_xscale == 1) {

    //Align the text
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    
    //Set the font
    draw_set_font(font)
    
    //Set the alpha
    draw_set_alpha(1)
    
    //Makes the word choice   
    var i, txt;
    for (i = 0; i &lt; 3; i++;) {
    
        //Set the text to draw
        txt = string(menu[i]);
        
        //Draw depending of the option chosen
        if (choice != i)
            draw_text_colour_shadowed(view_xview[0]+512/2, view_yview[0]+288/2-12+(i)*12, string(txt), make_color_rgb(1,117,203), make_color_rgb(151,216,255), 1, 1, 1, 1);
        else
            draw_text_colour_shadowed(view_xview[0]+512/2, view_yview[0]+288/2-12+(i)*12,"{ " + string(txt) + " }", make_color_rgb(1,117,203), c_white, 1, 1, 1, 1);
    }
    
    //Re-align the text
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    draw_text(view_xview[0], view_yview[0], text("Golden Notes", "Notas Douradas") + ": " + string(global.golden_notes) + "#" + text("Double Golden Notes", "Notas Douradas Duplas") + ": " + string(global.golden_notes) );

    if global.online_enabled
    {
        draw_text(view_xview[0], view_yview[0] + 260, "Connected: " + string(gms_info_isconnected()));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
