<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GFX;
off = 0;
ang_radius = 0;
menu_off = 320;
car_off = 512;
base_off = 288;
overlay_alpha = 0;

TweenFireTo(id, EaseOutQuad, 0, false, 10, 40, "menu_off", 0);
TweenFireTo(id, EaseOutQuad, 0, false, 30, 80, "base_off", 0);
TweenFireTo(id, EaseOutQuad, 0, false, 60, 80, "car_off", 0);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
  
  option_selected     = 0;      // Option we're currently highlighting.
    option_description  = "";     // Description of a highlighted option.
    option_delay        = 30;
    option_bind         = 0;
    bind_check          = 0;
    bind_status         = 1;
    bind_key            = "";
    option_ended        = 0;
    controller_frame = 0;
    option_max = 7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase Offset
off += 1;
ang_radius +=1;
y = ystart+lengthdir_y(12,ang_radius)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard rebind.

    if(option_bind == 1)
    {
       if(bind_status == 10)
       {
          option_bind  = 0;
          bind_status  = 1;
          option_delay = 30;
       }       
       switch(bind_status)
       {
              case 1: { bind_key = text("UP", "CIMA");      break; }
              case 2: { bind_key = text("DOWN", "BAIXO");    break; }
              case 3: { bind_key = text("LEFT", "ESQUERDA");    break; }
              case 4: { bind_key = text("RIGHT", "DIREITA");   break; }
              case 5: { bind_key = text("ACTION A", "TECLA A");  break; }
              case 6: { bind_key = text("ACTION S", "TECLA S"); break; }
              case 7: { bind_key = text("ACTION D", "TECLA D"); break; }
              case 8: { bind_key = text("ACTION W", "TECLA W"); break; }
              case 9: { bind_key = "ENTER";   break; }
       }       
       if(option_delay == 0)
       {
          bind_check = keyboard_key;
       }
       if(bind_check != 0 &amp;&amp; option_delay == 0)
       {
           switch(bind_status)
           {
                  case 1: { global.key_up      = bind_check; option_delay = 30; bind_status = 2; keyboard_clear(vk_anykey);  break; }
                  case 2: { global.key_down    = bind_check; option_delay = 30; bind_status = 3; keyboard_clear(vk_anykey);  break; }               
                  case 3: { global.key_left    = bind_check; option_delay = 30; bind_status = 4; keyboard_clear(vk_anykey);  break; }        
                  case 4: { global.key_right   = bind_check; option_delay = 30; bind_status = 5; keyboard_clear(vk_anykey);  break; }         
                  case 5: { global.key_action  = bind_check; option_delay = 30; bind_status = 6; keyboard_clear(vk_anykey);  break; }
                  case 6: { global.key_special = bind_check; option_delay = 30; bind_status = 7; keyboard_clear(vk_anykey);  break; } 
                  case 7: { global.key_specialB = bind_check; option_delay = 30; bind_status = 8; keyboard_clear(vk_anykey);  break; }    
                  case 8: { global.key_specialC = bind_check; option_delay = 30; bind_status = 9; keyboard_clear(vk_anykey);  break; }      
                  case 9: { global.key_enter   = bind_check; option_delay = 30; bind_status = 10; keyboard_clear(vk_anykey);  break; }                                                                                      
           }
           
           aud_play_simple(snd_menu_accept);
       }       
    }
    
 // Delay.
    if(option_delay != 0)
    {
       option_delay -= 1;
    }
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gamepad rebind.

    if(option_bind == 2)
    {
       if(bind_status == 6)
       {
          option_bind  = 0;
          bind_status  = 1;
          option_delay = 30;
       }       
       switch(bind_status)
       {
              case 1: { bind_key = text("ACTION A", "AÇÃO A");   break; }
              case 2: { bind_key = text("ACTION S", "AÇÃO S");  break; }
              case 3: { bind_key = text("ACTION D", "AÇÃO D");  break; }
              case 4: { bind_key = text("ACTION W", "AÇÃO W");  break; }
              case 5: { bind_key = "ENTER";    break; }
       }       
       if(option_delay == 0)
       {
          bind_check = gamepad_check();
       }
       if(bind_check != 0 &amp;&amp; option_delay == 0)
       {
           switch(bind_status)
           {
                  case 1: { global.gmp_action  = bind_check; controller_frame = 1; option_delay = 40; bind_status = 2; break; }
                  case 2: { global.gmp_special = bind_check; controller_frame = 2; option_delay = 40; bind_status = 3; break; }              
                  case 3: { global.gmp_specialB = bind_check; controller_frame = 3; option_delay = 40; bind_status = 4; break; }              
                  case 4: { global.gmp_specialC = bind_check; controller_frame = 4; option_delay = 40; bind_status = 5; break; }               
                  case 5: { global.gmp_enter   = bind_check; controller_frame = 0; option_delay = 40; bind_status = 6; break; }                                                                                        
           }
           
           
           aud_play_simple(snd_menu_accept);
       }       
    }
    
 // Delay.
    if(option_delay != 0)
    {
       option_delay -= 1;
    }
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alpha
if option_bind &gt; 0
{
    overlay_alpha = scr_approach(overlay_alpha, 1, 0.1)
}
else
{
    overlay_alpha = scr_approach(overlay_alpha, 0, 0.1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GFX
draw_background_tiled(bg_options, 0, -off*2)
draw_sprite_ext(spr_options_sphere, off/2, 0, 160 + base_off, 1, 1, 0, c_white, 1)
draw_sprite_ext(spr_ednaldo_options, 0, 18 - car_off, 7 + y, 1, 1, 0, c_white, 1)
draw_sprite_ext(spr_options_tab, 0, 512 + menu_off, 0, 1, 1, 0, c_white, 1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw option pages.
    var xoff, yadd;
    xoff = 509 + menu_off;
    yadd = 10;

    draw_set_font(fnt_century_26);
    draw_set_halign(fa_left);
    draw_set_color(c_white)
    draw_text_shadowed_normal(261 + menu_off, 6, text("SETTINGS", "CONFIGURAÇÕES"))
    draw_set_color(c_white);
    draw_set_font(fnt_normal_8); 
    draw_set_halign(fa_right);   

    if(option_bind == 0)
    {
     
       // Change option.
          if(keyboard_check_pressed(global.key_down) &amp;&amp; option_ended != 1)
          {  
             aud_play_sound(snd_menu_bleep, global.sfx_volume, 1, 0, 0);
             if(option_selected &lt; option_max)
             {
                option_selected += 1;
             }
             else
             {
                option_selected = 0;
             }
          } 
          if(keyboard_check_pressed(global.key_up) &amp;&amp; option_ended != 1)
          {  
             aud_play_sound(snd_menu_bleep, global.sfx_volume, 1, 0, 0);          
             if(option_selected &gt; 0)
             {
                option_selected -= 1;
             }
             else
             {
                option_selected = option_max - 1;
             }
          } 
           
// =========== RESOLUTION

          if(option_selected == 0)
          {
             option_description = text("- Change the Display Resolution -", "- Altere a resolução da tela -")
             draw_set_color(c_yellow);
             if(keyboard_check_pressed(global.key_left) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(snd_menu_bleep, global.sfx_volume, 1, 0, 0);
                if(global.screen_scale &gt; 1)
                {
                   global.screen_scale -= 1;
                }
                else
                {
                   global.screen_scale = 4;
                }
                // Set screen resolution.
                   if(global.screen_scale != 4)
                   {
                   if(window_get_fullscreen() == true)
                   {
                      window_set_fullscreen(false);
                   }
                   window_set_size(global.screen_width*global.screen_scale, global.screen_height*global.screen_scale);
                   window_center();             
                   alarm[0] = 1;
                   }
                   else
                   { 
                      window_set_fullscreen(true);
                      window_set_size(global.screen_width, global.screen_height);   
                      window_center();      
                      alarm[0] = 1;                
                   }
             }
             if(keyboard_check_pressed(global.key_right) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(snd_menu_bleep, global.sfx_volume, 1, 0, 0);             
                if(global.screen_scale &lt; 4)
                {
                   global.screen_scale += 1;
                }
                else
                {
                   global.screen_scale = 1;
                }
                // Set screen resolution.
                   if(global.screen_scale != 4)
                   {
                   if(window_get_fullscreen() == true)
                   {
                      window_set_fullscreen(false);
                   }
                   window_set_size(global.screen_width*global.screen_scale, global.screen_height*global.screen_scale);
                   window_center(); 
                   alarm[0] = 1            
                   }
                   else
                   { 
                      window_set_fullscreen(true);
                      window_set_size(global.screen_width, global.screen_height);   
                      window_center();      
                      alarm[0] = 1;                
                   }
                }             
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text_shadowed_normal(xoff, 48 + yadd, text("RESOLUTION - [", "RESOLUÇÃO - [")+string(global.screen_width*global.screen_scale)+"x"+string(global.screen_height*global.screen_scale)+"]")
       
          
// =========== BACKGROUND MUSIC
          
          if(option_selected == 1)
          {
             option_description = text("- Change the Volume for Background Music -", "- Altere o volume da música de fundo -")
             draw_set_color(c_yellow);
             if(keyboard_check(global.key_left) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(snd_menu_bleep, global.sfx_volume, 1, 0, 0);             
                global.bgm_volume -= 0.01;
                if(global.bgm_volume &lt; 0.01)
                {
                   global.bgm_volume = 0;
                }
             }
             if(keyboard_check(global.key_right) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(snd_menu_bleep, global.sfx_volume, 1, 0, 0);             
                global.bgm_volume += 0.01;
                if(global.bgm_volume &gt;= 1)
                {
                   global.bgm_volume = 1;
                }                
             }             
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text_shadowed_normal(xoff, 64 + yadd, text("MUSIC VOLUME - ", "VOLUME DA MÚSICA - ")+string( max(floor(global.bgm_volume*100),min(0))) + "%")      
       
// =========== SOUND EFFECTS
          
          if(option_selected == 2)
          {
             option_description = text("- Change the Volume for Sound Effects -", "- Altere o volume dos efeitos sonoros -")
             draw_set_color(c_yellow);
             if(keyboard_check(global.key_left) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(snd_menu_bleep, global.sfx_volume, 1, 0, 0);             
                global.sfx_volume -= 0.01;
                if(global.sfx_volume &lt; 0.01)
                {
                   global.sfx_volume = 0;
                }
             }
             if(keyboard_check(global.key_right) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(snd_menu_bleep, global.sfx_volume, 1, 0, 0);             
                global.sfx_volume += 0.01;
                if(global.sfx_volume &gt;= 1)
                {
                   global.sfx_volume = 1;
                }                
             }              
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text_shadowed_normal(xoff, 80 + yadd, text("SOUND VOLUME - ", "VOLUME DE SOM -") + string( max(floor(global.sfx_volume*100),min(0))) + "%") 
       
// =========== VOICE EFFECTS
          
          if(option_selected == 3)
          {
             option_description = text("- Change the Volume for Voice Lines -", "- Altere o volume das linhas de voz -")
             draw_set_color(c_yellow);
             if(keyboard_check(global.key_left) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(snd_menu_bleep, global.voice_volume, 1, 0, 0);             
                global.voice_volume -= 0.01;
                if(global.voice_volume &lt; 0.01)
                {
                   global.voice_volume = 0;
                }
             }
             if(keyboard_check(global.key_right) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(snd_menu_bleep, global.voice_volume, 1, 0, 0);             
                global.voice_volume += 0.01;
                if(global.voice_volume &gt;= 1)
                {
                   global.voice_volume = 1;
                }                
             }              
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text_shadowed_normal(xoff, 96 + yadd, text("VOICE VOLUME - ", "VOLUME DE VOZ -")+string( max(floor(global.voice_volume*100),min(0))) + "%") 
       
// =========== KEYBOARD
          
          if(option_selected == 4)
          {
             option_description = text("- Change the Keyboard bindings -", "- Altere as teclas do teclado -")
             draw_set_color(c_yellow);
             if((keyboard_check_pressed(global.key_action)) &amp;&amp; option_ended != 1)
             {
                option_delay = 30;
                option_bind  = 1;
                aud_play_simple(snd_menu_accept);
             }
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text_shadowed_normal(xoff, 112 + yadd, text("KEYBOARD BINDINGS", "TECLAS NO TECLADO")) 
       
// =========== GAMEPAD
          
          if(option_selected == 5)
          {
             option_description = text("- Change the Gamepad bindings -", "- Altere as config. do Gamepad -")
             if(obj_gamepad_controller.gmp_check == 1)
             {
                draw_set_color(c_yellow);
                if((keyboard_check_pressed(global.key_action)) &amp;&amp; option_ended != 1)
                {
                   option_delay = 30;
                   option_bind  = 2;
                   aud_play_simple(snd_menu_accept);
                }            
             }
             else
             {
                draw_set_color(c_red);    
                if((keyboard_check_pressed(global.key_action)) &amp;&amp; option_ended != 1)
                {
                   aud_play_sound(snd_hurt, global.sfx_volume, 1, 0, 0);   
                }            
             }
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text_shadowed_normal(xoff, 128 + yadd, text("GAMEPAD BINDINGS", " CONFIG. DO CONTROLE")) 
     
// =========== VSYNC
          
          if(option_selected == 6)
          {
             option_description = text("- Change the VSync Settings. -", "- Altere as config. do VSync. -")
             draw_set_color(c_yellow);
             
             if(keyboard_check_pressed(global.key_left) &amp;&amp; option_ended != 1)
             {
                global.vsync = false;
                display_reset(0, global.vsync);
             }
             
             if(keyboard_check_pressed(global.key_right) &amp;&amp; option_ended != 1)
             {
                global.vsync = true;
                display_reset(0, global.vsync);            
             }             
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text_shadowed_normal(xoff, 144 + yadd, "VSYNC: " + string(scr_return_on(global.vsync))) 
               
// =========== EXIT
                           
          if(option_selected == 7)
          {
             option_description = text("- Return to the Title Screen -", "- Retorne à tela de título -")
             draw_set_color(c_yellow);
             if((keyboard_check_pressed(global.key_action)) &amp;&amp; option_ended != 1)
             {
                if(instance_exists(objFadeToValue) == false)
                {                   
                   option_ended = 1;
                   with(instance_create(0, 0, objFadeToValue))
                   {
                        value = rm_title_screen;
                   }
                   aud_play_simple(snd_menu_accept);
                   save_global_create();
                }
             }
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text_shadowed_normal(xoff, global.screen_height-38, text("EXIT", "SAIR"))                  
        
    }
    
// ============== OPTION DESCRIPTION
    
    draw_set_font(fnt_century_8);
    draw_set_halign(fa_left);
    draw_sprite(spr_black_bar, 0, 0, 266);
    draw_text_shadowed(2, 269, option_description);
    
    if option_selected &lt; 4 or option_selected = 6
    {
        draw_key(398, 267, "LEFT");
        draw_key(421, 267, "RIGHT");
    }
    
    draw_key(444, 267, "UP")
    draw_key(467, 267, "DOWN")
    draw_key(490, 267, "A")
        
// =========== GAMEPAD
    
    draw_sprite_ext(spr_options_overlay, 0, 0, 0, 1, 1, 0, c_white, overlay_alpha);
    
    if (option_bind = 1)
    {
        draw_set_halign(fa_center);
        draw_text_shadowed_normal(global.screen_width/2, global.screen_height/2, text("PRESS ANY KEY FOR: ", "PRESSIONE QUALQUER TECLA PARA: ")+string(bind_key));                       
    }
    
    if(option_bind = 2)
    {
        draw_set_halign(fa_left);
        draw_set_font(fnt_century_8);
        draw_sprite_ext(spr_options_controller, controller_frame, global.screen_width/2, global.screen_height/2, 1, 1, 0, c_white, overlay_alpha);
        draw_text_shadowed_normal(2, 269, text("PRESS ANY KEY FOR: ", "PRESSIONE QUALQUER BOTÃO NO SEU CONTROLE PARA: ")+string(bind_key))                       
    }
    
    draw_set_halign(-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
